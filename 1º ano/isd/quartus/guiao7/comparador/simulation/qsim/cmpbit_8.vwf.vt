// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2018 16:45:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cmpbit_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cmpbit_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ai0;
reg ai1;
reg ai2;
reg ai3;
reg ai4;
reg ai5;
reg ai6;
reg ai7;
reg bi0;
reg bi1;
reg bi2;
reg bi3;
reg bi4;
reg bi5;
reg bi6;
reg bi7;
reg xin;
reg yin;
reg zin;
// wires                                               
wire xout;
wire yout;
wire zout;

// assign statements (if any)                          
cmpbit_8 i1 (
// port map - connection between master ports and signals/registers   
	.ai0(ai0),
	.ai1(ai1),
	.ai2(ai2),
	.ai3(ai3),
	.ai4(ai4),
	.ai5(ai5),
	.ai6(ai6),
	.ai7(ai7),
	.bi0(bi0),
	.bi1(bi1),
	.bi2(bi2),
	.bi3(bi3),
	.bi4(bi4),
	.bi5(bi5),
	.bi6(bi6),
	.bi7(bi7),
	.xin(xin),
	.xout(xout),
	.yin(yin),
	.yout(yout),
	.zin(zin),
	.zout(zout)
);
initial 
begin 
#1000000 $finish;
end 

// ai0
initial
begin
	ai0 = 1'b0;
end 

// ai1
initial
begin
	ai1 = 1'b0;
end 

// ai2
initial
begin
	ai2 = 1'b0;
end 

// ai3
initial
begin
	ai3 = 1'b0;
end 

// ai4
initial
begin
	ai4 = 1'b0;
end 

// ai5
initial
begin
	ai5 = 1'b0;
end 

// ai6
initial
begin
	ai6 = 1'b0;
end 

// ai7
initial
begin
	ai7 = 1'b0;
end 

// bi0
initial
begin
	bi0 = 1'b0;
end 

// bi1
initial
begin
	bi1 = 1'b0;
end 

// bi2
initial
begin
	bi2 = 1'b0;
end 

// bi3
initial
begin
	bi3 = 1'b0;
end 

// bi4
initial
begin
	bi4 = 1'b0;
end 

// bi5
initial
begin
	bi5 = 1'b0;
end 

// bi6
initial
begin
	bi6 = 1'b0;
end 

// bi7
initial
begin
	bi7 = 1'b0;
end 

// xin
initial
begin
	xin = 1'b0;
end 

// yin
initial
begin
	yin = 1'b0;
end 

// zin
initial
begin
	zin = 1'b1;
end 
endmodule

