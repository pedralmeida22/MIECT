// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2018 16:10:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Multiplexers
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Multiplexers_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i00;
reg i01;
reg i02;
reg i03;
reg i10;
reg i11;
reg i12;
reg i13;
reg i20;
reg i21;
reg i22;
reg i23;
reg i30;
reg i31;
reg i32;
reg i33;
reg i40;
reg i41;
reg i42;
reg i43;
reg i50;
reg i51;
reg i52;
reg i53;
reg i60;
reg i61;
reg i62;
reg i63;
reg i70;
reg i71;
reg i72;
reg i73;
reg s0;
reg s1;
reg s2;
// wires                                               
wire y1;
wire y2;
wire y3;
wire y4;

// assign statements (if any)                          
Multiplexers i1 (
// port map - connection between master ports and signals/registers   
	.i00(i00),
	.i01(i01),
	.i02(i02),
	.i03(i03),
	.i10(i10),
	.i11(i11),
	.i12(i12),
	.i13(i13),
	.i20(i20),
	.i21(i21),
	.i22(i22),
	.i23(i23),
	.i30(i30),
	.i31(i31),
	.i32(i32),
	.i33(i33),
	.i40(i40),
	.i41(i41),
	.i42(i42),
	.i43(i43),
	.i50(i50),
	.i51(i51),
	.i52(i52),
	.i53(i53),
	.i60(i60),
	.i61(i61),
	.i62(i62),
	.i63(i63),
	.i70(i70),
	.i71(i71),
	.i72(i72),
	.i73(i73),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.y1(y1),
	.y2(y2),
	.y3(y3),
	.y4(y4)
);
initial 
begin 
#1000000 $finish;
end 

// i00
initial
begin
	i00 = 1'b0;
	i00 = #10000 1'b1;
end 

// i01
initial
begin
	i01 = 1'b0;
	i01 = #10000 1'b1;
end 

// i02
initial
begin
	i02 = 1'b0;
	i02 = #10000 1'b1;
end 

// i03
initial
begin
	i03 = 1'b0;
	i03 = #10000 1'b1;
end 

// i10
initial
begin
	i10 = 1'b0;
	i10 = #10000 1'b1;
end 

// i11
initial
begin
	i11 = 1'b0;
end 

// i12
initial
begin
	i12 = 1'b0;
end 

// i13
initial
begin
	i13 = 1'b0;
end 

// i20
initial
begin
	i20 = 1'b0;
end 

// i21
initial
begin
	i21 = 1'b0;
end 

// i22
initial
begin
	i22 = 1'b0;
end 

// i23
initial
begin
	i23 = 1'b0;
end 

// i30
initial
begin
	i30 = 1'b0;
end 

// i31
initial
begin
	i31 = 1'b0;
end 

// i32
initial
begin
	i32 = 1'b0;
end 

// i33
initial
begin
	i33 = 1'b0;
end 

// i40
initial
begin
	i40 = 1'b0;
end 

// i41
initial
begin
	i41 = 1'b0;
end 

// i42
initial
begin
	i42 = 1'b0;
end 

// i43
initial
begin
	i43 = 1'b0;
end 

// i50
initial
begin
	i50 = 1'b0;
end 

// i51
initial
begin
	i51 = 1'b0;
end 

// i52
initial
begin
	i52 = 1'b0;
end 

// i53
initial
begin
	i53 = 1'b0;
end 

// i60
initial
begin
	i60 = 1'b0;
end 

// i61
initial
begin
	i61 = 1'b0;
end 

// i62
initial
begin
	i62 = 1'b0;
end 

// i63
initial
begin
	i63 = 1'b0;
end 

// i70
initial
begin
	i70 = 1'b0;
end 

// i71
initial
begin
	i71 = 1'b0;
end 

// i72
initial
begin
	i72 = 1'b0;
end 

// i73
initial
begin
	i73 = 1'b0;
end 

// s0
initial
begin
	s0 = 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
end 

// s2
initial
begin
	s2 = 1'b0;
end 
endmodule

